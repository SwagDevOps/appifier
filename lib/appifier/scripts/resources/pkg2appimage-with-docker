#!/usr/bin/env sh

# @see Appifier::Scripts::Pkg2appimageWithDocker
# @see https://github.com/AppImage/pkg2appimage/blob/7ca1e6efce190a0c81c863b23419a2a11ea434af/pkg2appimage-with-docker
# @see https://github.com/AppImage/pkg2appimage/issues/373#issuecomment-666293168


# Environement variables --------------------------------------------
#
# * ``DOCKER_APP_NAME`` (String)  used by pkg2appimage and docker to name build directory
# * ``DOCKER_CACHING``  (Boolean) caching by mounting the build cache directory into the container
DOCKER_APP_NAME=${DOCKER_APP_NAME:-''}
DOCKER_CACHING=${DOCKER_CACHING:-false}

# Global variables --------------------------------------------------
set -eu

UID=$(id -u)
CONTAINER_ID=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
IMAGE_NAME="u${UID}/appifier-builder"
CONTAINER_NAME="$(basename -- "${IMAGE_NAME}")_${CONTAINER_ID}.${UID}"

# Functions ---------------------------------------------------------
main() {
    local recipe=$(prepare_recipe "${1}")
    local recipe_name=$(basename -- "${recipe}" .yml)

    log info "Building ${recipe_name} in a container..."
    container_build
    container_run "$recipe"
}

container_build() {
    docker build -t "${IMAGE_NAME}" .
}

container_cache_args() {
  (test "${DOCKER_CACHING}" != 'true') && {
    return 95 # Operation not supported
  }

  local app_name=${DOCKER_APP_NAME}
  test -z "${app_name}" && return 43 # Identifier removed
  local build_dir=$(dirname -- pkg2appimage)
  local build_path=${build_dir}/.docker/${app_name}

  mkdir -pv "${build_path}"

  printf  -- '-v %s:%s' \
      "$(readlink -f -- "${build_path}")" \
      "/workspace/${app_name}"
}

container_run() {
    local recipe=$1

    log info "Running container (${CONTAINER_NAME})"
    trap cleanup 0 2 15
    docker run -it \
        --name "${CONTAINER_NAME}" \
        --cap-add SYS_ADMIN \
        --device /dev/fuse \
        --security-opt apparmor:unconfined \
        --user $(id -u):$(id -g) \
        $(container_cache_args && echo 'Mounting the build cache directory into the container' >&2) \
        -v "$(readlink -f -- out):/workspace/out" \
        -v "$(readlink -f -- pkg2appimage):/workspace/pkg2appimage:ro" \
        -v "$(readlink -f -- "$recipe"):/workspace/${recipe}:ro" \
        -v "$(readlink -f functions.sh):/workspace/functions.sh:ro" \
        -e ARCH="${ARCH:-x86_64}" \
        "${IMAGE_NAME}" \
        ./pkg2appimage "$recipe"
}

prepare_recipe() {
    local recipe=$1
    recipe=$(
        test "$(basename -- "${recipe}" .yml)" = "$recipe" || {
            echo "$recipe"
            return 0
        }
        echo "${recipe}.yml"
    )

    test -f "$recipe" || {
        test -f "recipes/${recipe}" && {
            recipe="recipes/${recipe}"
        } || {
            log warn "cannot access '${recipe}': No such file or directory"
            return 2 # ENOENT
        }
    }

    echo "$recipe"
}

log() {
    local type="$1"
    local message="$2"
    local color=$(
        case "${type}" in
        info) echo '96' ;;
        warn) echo '91' ;;
        *) echo '99' ;;
        esac
    )

    (
        test -t 2 && {
            printf '\e[%sm\e[1m%s\e[0m\n' "$color" "$message" || :
        } || {
            printf '%s\n' "$message"
        }
    ) 1>&2
}

cleanup() {
    local retcode=$?

    case "${retcode}" in
    0)
        log info "cleaning up..."
        ;;
    *)
        log warn "error occurred (${retcode}), cleaning up..."
        ;;
    esac

    docker rm -f "$CONTAINER_NAME" >/dev/null

    exit "$retcode"
}

# Execution ---------------------------------------------------------
main "$@"
